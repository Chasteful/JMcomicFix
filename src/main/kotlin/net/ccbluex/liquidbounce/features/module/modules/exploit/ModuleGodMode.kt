package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.jmcomicfix.utils.time.TimerUtil
import net.ccbluex.liquidbounce.config.types.nesting.Choice
import net.ccbluex.liquidbounce.config.types.nesting.ChoiceConfigurable
import net.ccbluex.liquidbounce.event.tickHandler
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.ClientModule
import net.ccbluex.liquidbounce.utils.client.sendPacketSilently
import net.ccbluex.liquidbounce.utils.entity.moving
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket
import kotlin.math.cos
import kotlin.math.sin

object ModuleGodMode : ClientModule("GodMode", Category.EXPLOIT) {

    private val modes = choices("Mode", IntaveBorder,
        arrayOf(IntaveBorder)).apply { tagBy(this) }

    abstract class GodModeMode(name: String) : Choice(name) {
        override val parent: ChoiceConfigurable<IntaveBorder>
            get() = modes
        abstract fun onTick()
    }

    @Suppress("unused")
    private val tick = tickHandler {
        if (running) modes.activeChoice.onTick()
    }


    object IntaveBorder : GodModeMode("Intave Border") {
        private val timerHelper = TimerUtil()
        private var tickDelay = 0

        override fun onTick() {
            val outsideBorder = !world.worldBorder.contains(player.blockPos)
            if (!outsideBorder) {
                if (player.moving && tickDelay++ >= 3) {
                    tickDelay = 0
                    val yawRad = Math.toRadians(player.yaw.toDouble())
                    val x = player.x - sin(yawRad) * 0.1
                    val z = player.z + cos(yawRad) * 0.1
                    sendPacketSilently(PlayerMoveC2SPacket.PositionAndOnGround(x, player.y, z, false, player.horizontalCollision))
                    player.setPosition(x, player.y, z)
                    timerHelper.reset()
                }
            } else {
                player.velocity = player.velocity.multiply(0.0, 0.0, 0.0)
                player.input.movementForward = 0f
                player.input.movementSideways = 0f
            }
        }
    }
}
