package net.ccbluex.liquidbounce.features.module.modules.exploit.phase.modes

import net.ccbluex.liquidbounce.config.types.nesting.Choice
import net.ccbluex.liquidbounce.config.types.nesting.ChoiceConfigurable
import net.ccbluex.liquidbounce.event.tickHandler
import net.ccbluex.liquidbounce.features.module.modules.exploit.phase.ModulePhase
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket.PositionAndOnGround
import kotlin.math.cos
import kotlin.math.sin

object PhaseSkip : Choice("Skip") {
    override val parent: ChoiceConfigurable<*>
        get() = ModulePhase.mode

    @Suppress("unused")
    private val tickHandler = tickHandler {
        if (player.isOnGround && player.horizontalCollision && !player.isInsideWall) {
            val direction = Math.toRadians(player.yaw.toDouble())
            val posX = -sin(direction) * 0.3
            val posZ = cos(direction) * 0.3

            for (i in 0..2) {
                network.sendPacket(PositionAndOnGround(
                    player.x, player.y + 0.06, player.z, true,true),)
                network.sendPacket(PositionAndOnGround(
                    player.x + posX * i, player.y, player.z + posZ * i, true,true))
            }

            player.setPosition(player.x + posX, player.y, player.z + posZ)
        }
    }
}
